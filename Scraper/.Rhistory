library(dplyr)
library(httr)
library(XML)
url <- "http://www.ungrandt.com.ar/planteles/"
teams <- read.csv("teams.csv")
teams
address <- c(url,teams[1])
address
teams$team
teams$team[1]
address <- c(url,teams$team[1])
address
?cat
address <- cat(url,teams$team[1],sep = "")
address
address <- paste(url,teams$team[1],sep = "")
address
html <- htmlTreeParse(address,useInternalNodes = TRUE)
players <- xpathSApply(html,"//table[@class='table table-condensed table-bordered plantel small']",xmlValue)
players
players <- xpathSApply(html,"//table[@class='table-responsive']",xmlValue)
players
players <- xpathSApply(html,"//div[@class='table-responsive']",xmlValue)
players
tables <- readHTMLTable(address)
tables
tables$Nombre
tables[1]
tables[[1]]
players <- readHTMLTable(address)[[1]]
players
players$Pos.
teams$team
stats <- lapply(teams$team,GetTeamPlayers)
GetTeamPlayers <- function(team){
address <- paste(url,team,sep = "")
players <- readHTMLTable(address)[[1]]
}
stats <- lapply(teams$team,GetTeamPlayers)
stats
stats <- sapply(teams$team,GetTeamPlayers)
stats
stats <- lapply(teams$team,GetTeamPlayers)
stats
GetTeamPlayers <- function(team){
address <- paste(url,team,sep = "")
players <- readHTMLTable(address)[[1]]
players <- mutate(players,equipo = team)
}
stats <- lapply(teams$team,GetTeamPlayers)
stats
df <- ldply(stats, data.frame)
library(plyr)
df <- ldply(stats, data.frame)
df
GetTeamPlayers <- function(team){
address <- paste(url,team,sep = "")
players <- readHTMLTable(address)[[1]]
players <- mutate(players,equipo = team)
}
url <- "http://www.ungrandt.com.ar/planteles/"
#Get teams
teams <- read.csv("teams.csv")
#Scrape teams player stats
stats <- sapply(teams$team,GetTeamPlayers)
stats <- ldply(stats, data.frame)
#Write stats to a csv file
write.csv(stats)
url <- "http://www.ungrandt.com.ar/planteles/"
#Get teams
teams <- read.csv("teams.csv")
#Scrape teams player stats
stats <- lapply(teams$team,GetTeamPlayers)
stats <- ldply(stats, data.frame)
#Write stats to a csv file
write.csv(stats)
setwd("D:/workspace/GranDT/src/Scraper")
url <- "http://www.ungrandt.com.ar/planteles/"
#Get teams
teams <- read.csv("teams.csv")
#Scrape teams player stats
stats <- lapply(teams$team,GetTeamPlayers)
stats <- ldply(stats, data.frame)
#Write stats to a csv file
write.csv(stats)
#Write stats to a csv file
write.csv("playerstats",stats)
write.csv(stats,"playerstats.csv")
stats
summary(stats)
str(stats)
arrange(stats,desc(PT),desc(PJ))
players
GetTeamPlayers <- function(team){
address <- paste(url,team,sep = "")
players <- readHTMLTable(address)[[1]]
players <- mutate(players,equipo = team)
}
stats
install.packages("genalg")
library(genalg)
evalutaion <- function(x){ sample(1:10000,size = 1) }
solution <- rbga.bin(size=nrow(stats),zeroToOneRatio = 100,popSize=300, iters=100,
mutationChance=0.05,elitism=NA, zeroToOneRatio=10,
evalFunc=evalutaion)
solution <- rbga.bin(size=nrow(stats),zeroToOneRatio = 100,popSize=300, iters=100,
mutationChance=0.05, evalFunc=evalutaion)
solution
str(population)
summary(population)
summary(solution$population)
str(solution$population)
solution$population[,300]
solution$population[300,890]
solution$population[300,]
last <- solution$population[300,]
last[last != 0]
solution <- rbga.bin(size=nrow(stats),zeroToOneRatio = 59.33,popSize=200, iters=50,
mutationChance=0.02, evalFunc=evalutaion)
last <- solution$population[300,]
str(solution$population)
last <- solution$population[200,]
last
last[last != 0]
length(last[last != 0])
solution <- rbga.bin(size=nrow(stats),zeroToOneRatio = 60,popSize=200, iters=50,
mutationChance=0.02, evalFunc=evalutaion)
last <- solution$population[200,]
length(last[last != 0])
solution <- rbga.bin(size=nrow(stats),zeroToOneRatio = 60,popSize=200, iters=50,
mutationChance=0.02, evalFunc=evalutaion)
last <- solution$population[200,]
length(last[last != 0])
nrow(stats)
sample(0:1,size = 890,prob = c(98.32,1.68))
sample(x = c(0,1),size = 890,prob = c(98.32,1.68))
sample(size = x = c(0,1), size = 890, prob = c(98.32,1.68), replace=TRUE)
sample(x = c(0,1), size = 890, prob = c(98.32,1.68), replace=TRUE)
sample <- sample(x = c(0,1), size = 890, prob = c(98.32,1.68), replace=TRUE)
sample
length(sample[sample != 0])
sample <- sample(x = c(0,1), size = 890, prob = c(99,1), replace=TRUE)
length(sample[sample != 0])
sample <- sample(x = c(0,1), size = 890, prob = c(98.5,1.5), replace=TRUE)
length(sample[sample != 0])
sample <- sample(x = c(0,1), size = 890, prob = c(98.5,1.5), replace=TRUE)
length(sample[sample != 0])
sample <- sample(x = c(0,1), size = 890, prob = c(98.5,1.5), replace=TRUE)
length(sample[sample != 0])
sample <- sample(x = c(0,1), size = 890, prob = c(98.5,1.5), replace=TRUE)
length(sample[sample != 0])
sample <- sample(x = c(0,1), size = 890, prob = c(98.5,1.5), replace=TRUE)
length(sample[sample != 0])
sample <- sample(x = c(0,1), size = 890, prob = c(98.32,1.68), replace=TRUE)
length(sample[sample != 0])
sample <- sample(x = c(0,1), size = 890, prob = c(98.32,1.68), replace=TRUE)
length(sample[sample != 0])
sample <- sample(x = c(0,1), size = 890, prob = c(98.32,1.68), replace=TRUE)
length(sample[sample != 0])
sample <- sample(x = c(0,1), size = 890, prob = c(98.32,1.68), replace=TRUE)
length(sample[sample != 0])
sample <- sample(x = c(0,1), size = 890, prob = c(98.32,1.68), replace=TRUE)
length(sample[sample != 0])
sample <- sample(x = c(0,1), size = 890, prob = c(98.32,1.68), replace=TRUE)
length(sample[sample != 0])
stats[sample,]
stats[1:5,]
which(sample == 1)
stats[which(sample == 1),]
sum(stats$PT)
?sum
stats$PT
class(stats$PT)
as.vector(stats$PT)
sum(as.numeric(stats$PT))
stats[1,]
player <- stats[1,]
player$GC + player$GP + player$GR
stats2 <- factor(stats)
stats2 <- factor(stats$GC)
stats2
stats$GC
EvalFunc <- function(players){
players <- stats[which(players == 1),]
value <- sum(as.numeric(players$PT)) + sum(as.numeric(players$PJ)) + sum(as.numeric(players$F))
return (-value)
}
solution <- rbga.bin(size=nrow(stats),zeroToOneRatio = 60,popSize=200, iters=50,
mutationChance=0.02, evalFunc=EvalFunc)
library(genalg)
solution <- rbga.bin(size=nrow(stats),zeroToOneRatio = 60,popSize=200, iters=50,
mutationChance=0.02, evalFunc=EvalFunc)
last <- solution$population[200,]
last
length(last[last != 0])
solution <- rbga.bin(size=nrow(stats),zeroToOneRatio = 60,popSize=200, iters=50,
mutationChance=0.02, evalFunc=EvalFunc)
last <- solution$population[200,]
length(last[last != 0])
solution <- rbga.bin(size=nrow(stats),zeroToOneRatio = 120,popSize=200, iters=50,
mutationChance=0.02, evalFunc=EvalFunc)
last <- solution$population[200,]
length(last[last != 0])
solution <- rbga.bin(size=nrow(stats),zeroToOneRatio = 250,popSize=200, iters=50,
mutationChance=0.02, evalFunc=EvalFunc)
last <- solution$population[200,]
length(last[last != 0])
solution <- rbga.bin(size=nrow(stats),zeroToOneRatio = 875,popSize=200, iters=50,
mutationChance=0.02, evalFunc=EvalFunc)
last <- solution$population[200,]
length(last[last != 0])
solution <- rbga.bin(size=nrow(stats),zeroToOneRatio = 1000,popSize=200, iters=50,
mutationChance=0.02, evalFunc=EvalFunc)
last <- solution$population[200,]
length(last[last != 0])
last
stats[which(last == 1),]
