testPred <- predict(model,testSA)
confusionMatrix(testPred,testSA$chd)
testPred
confusionMatrix(testPred,testSA$chd)
testSA$chd
model <- train(factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial",trainSA)
trainPred <- predict(model,trainSA)
testPred <- predict(model,testSA)
confusionMatrix(testPred,testSA$chd)
confusionMatrix(trainPred,trainSA$chd)
missClass(trainSA$chd,trainPred)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial",trainSA)
trainPred <- predict(model,trainSA)
testPred <- predict(model,testSA)
missClass(trainSA$chd,trainPred)
missClass(testSA$chd,testPred)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
model <- train(y ~ .,method="rf",vowel.train)
?varImp
varImp(model)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]# trainSA$chd <- factor(trainSA$chd)
testSA = SAheart[-train,]#; testSA$chd <- factor(testSA$chd)
set.seed(13234)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial",trainSA)
trainPred <- predict(model,trainSA)
testPred <- predict(model,testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,trainPred)
missClass(testSA$chd,testPred)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
trainIndex = createDataPartition(segmentationOriginal$Case,p=0.7,list=FALSE)
training = segmentationOriginal[trainIndex,]
testing = segmentationOriginal[-trainIndex,]
set.seed(125)
modelall <- train(Class~.,method="rpart",data=training)
model <- train(Class ~ TotalIntenCh2 + FiberWidthCh1 + PerimStatusCh1 + VarIntenCh4,method="rpart",data=training)
print(model$finalModel)
plot(model$finalModel,uniform = TRUE)
text(model$finalModel,use.n = TRUE,all=TRUE,cex=.8)
library(rattle)
fancyRpartPlot(model$finalModel)
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
set.seed(125)
model <- train(Class ~ TotalIntenCh2 + FiberWidthCh1 + PerimStatusCh1 + VarIntenCh4,method="rpart",data=training)
modelall <- train(Class~.,method="rpart",data=training)
plot(modelall$finalModel,uniform = TRUE)
text(modelall$finalModel,use.n = TRUE,all=TRUE,cex=.8)
fancyRpartPlot(modelall$finalModel)
test1 <- data.frame(TotalIntenCh2 <- 23000, FiberWidthCh1 <- 10, PerimStatusCh1 <- 2)
test2 <- data.frame(TotalIntenCh2 <- 50000, FiberWidthCh1 <- 10, VarIntenCh4 <- 100)
test3 <- data.frame(TotalIntenCh2 <- 57000, FiberWidthCh1 <- 8, VarIntenCh4 <- 100)
test4 <- data.frame(FiberWidthCh1 <- 8, VarIntenCh4 <- 100, PerimStatusCh1 <- 2)
predict(model,test1)
predict(model,test2)
predict(model,test3)
predict(modelall,test1)
model <- train(Class ~ TotalIntenCh2 + FiberWidthCh1 + PerimStatusCh1 + VarIntenCh4,method="rpart",data=training)
fancyRpartPlot(model$finalModel)
predict(model,test1)
predict(model,test2)
predict(model,test3)
predict(model,test4)
fancyRpartPlot(model$finalModel)
fancyRpartPlot(modelall$finalModel)
test1 <- testing[1,]
test1$TotalIntenCh2 <- 23000; test1$FiberWidthCh1 <- 10; test1$PerimStatusCh1 <- 2
test2 <- testing[1,]
test2$TotalIntenCh2 <- 50000; test1$FiberWidthCh1 <- 10; test1$VarIntenCh4 <- 100
test3 <- testing[1,]
test3$TotalIntenCh2 <- 57000; test1$FiberWidthCh1 <- 8; test1$VarIntenCh4 <- 100
test4 <- testing[100,]
test4$FiberWidthCh1 <- 8; test1$VarIntenCh4 <- 100; test1$PerimStatusCh1 <- 2
predict(model,test1)
predict(model,test2)
predict(model,test3)
predict(model,test4)
predict(model,test3)
predict(model,test3)
test3$TotalIntenCh2 <- 57000; test1$FiberWidthCh1 <- 8; test1$VarIntenCh4 <- 100
predict(model,test3)
test3 <- testing[125,]
test3$TotalIntenCh2 <- 57000; test1$FiberWidthCh1 <- 8; test1$VarIntenCh4 <- 100
predict(model,test3)
test3
test3$FiberWidthCh1
test3 <- testing[1,]
test3$TotalIntenCh2 <- 57000; test1$FiberWidthCh1 <- 8; test1$VarIntenCh4 <- 100
shiny::runApp('Capstone/ShinyApp')
shiny::runApp('Capstone/ShinyApp')
shiny::runApp('Capstone/ShinyApp')
shiny::runApp('Capstone/ShinyApp')
shiny::runApp('Capstone/ShinyApp')
shiny::runApp('Capstone/ShinyApp')
input$action1
input$action1$label
input$action1
input$action1["label"]
input$action1["labels"]
input$action1["labelass"]
input$action1[1]
input$action1[2]
input$action1[3]
input$action1[[1]]
input$action1[[2]]
shiny::runApp()
shiny::runApp('Capstone/ShinyApp')
shiny::runApp('Capstone/ShinyApp')
shiny::runApp('Capstone/ShinyApp')
shiny::runApp('Capstone/ShinyApp')
shiny::runApp('Capstone/ShinyApp')
shiny::runApp('Capstone/ShinyApp')
input$button1.label
input$button1.text
print(input$button1.text)
print(input$button1.label)
shiny::runApp('Capstone/ShinyApp')
shiny::runApp('Capstone/ShinyApp')
pred$nextWord[1]
pred$nextWord[2]
str(pred)
pred
shiny::runApp()
shiny::runApp()
shiny::runApp('Capstone/ShinyApp')
words
shiny::runApp('Capstone/ShinyApp')
words
shiny::runApp('Capstone/ShinyApp')
words
shiny::runApp('Capstone/ShinyApp')
trim("la casa era rosa")
library(stringr)
str_trim("la cassa era rossa")
str_trim("la cassa era rossa ")
str_trim("   la cassa era rossa ")
shiny::runApp('Capstone/ShinyApp')
shiny::runApp('Capstone/ShinyApp')
shiny::runApp('Capstone/ShinyApp')
shiny::runApp('Capstone/ShinyApp')
shiny::runApp('Capstone/ShinyApp')
shiny::runApp('Capstone/ShinyApp')
setwd("D:/workspace/AutoDT")
source('D:/workspace/AutoDT/GetPlayerStats.R')
GetPlayerStats()
source('D:/workspace/AutoDT/GetPlayerStats.R')
debugSource('D:/workspace/AutoDT/GenerateTeam.R')
GetTeamPlayers <- function(team){
address <- paste(teamsurl,team,sep = "")
list <- readHTMLTable(address)
if(length(list) > 1){
players <- readHTMLTable(address)[[2]]
}
else{
players <- readHTMLTable(address)[[1]]
}
players <- mutate(players,equipo = team)
}
GetPlayerStats <- function(){
teamsurl <- "http://www.ungrandt.com.ar/planteles/"
#Get teams
teams <- read.csv("teams.csv")
#Scrape teams player stats
stats <- lapply(teams$team,GetTeamPlayers)
stats <- ldply(stats, data.frame)
#Add player IDs
#stats <- data.frame(ID = rownames(stats),stats)
names(stats)[1] <- "Pos"
#Write stats to a csv file
write.csv(stats,"playerstats.csv")
return(stats)
}
library(plyr)
library(dplyr)
library(httr)
library(XML)
GetPlayerStats()
teamsurl <- "http://www.ungrandt.com.ar/planteles/"
teams <- read.csv("teams.csv")
GetPlayerStats()
library(GA)
debugSource('D:/workspace/AutoDT/GenerateTeam.R')
head(finalTeam)
head(solPlayers)
head(finalList)
finalList <- count(solPlayers)
count(solPlayers)
str(solPlayers)
library(dplyr)
count(solPlayers)
class(solPlayers)
list(solPlayers)
count(list(solPlayers))
table(solPlayers)
finalList <- table(solPlayers)
finalList[with(finalList,order(-freq)),]
finalList
names(finalList)
int(names(finalList))
integer(names(finalList))
finalList[1]
finalList[1][1]
str(finalList)
sort(finalList)
sort(finalList, decreasing=TRUE)
finalList <- sort(table(solPlayers), decreasing=TRUE)
finalList
summary(finalList)
as.vector(finalList)
stats[names(finalList),]
finalTeam <- stats[names(finalList),]
data.frame(finalTeam,finalList)
finalTeam <- data.frame(finalTeam,finalList)
write.csv(x=finalTeam, file="finalteam_2016_2.csv")
